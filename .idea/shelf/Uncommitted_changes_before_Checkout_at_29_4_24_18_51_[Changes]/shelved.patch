Index: app/src/main/java/com/example/comovapp/mapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.comovapp;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\nimport androidx.fragment.app.FragmentActivity;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.pm.PackageManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.Manifest;\nimport android.telephony.CellIdentityCdma;\nimport android.telephony.CellIdentityGsm;\nimport android.telephony.CellIdentityLte;\nimport android.telephony.CellIdentityNr;\nimport android.telephony.CellIdentityWcdma;\nimport android.telephony.CellInfo;\nimport android.telephony.CellInfoCdma;\nimport android.telephony.CellInfoGsm;\nimport android.telephony.CellInfoLte;\nimport android.telephony.CellInfoNr;\nimport android.telephony.CellInfoWcdma;\nimport android.telephony.CellSignalStrength;\nimport android.telephony.CellSignalStrengthCdma;\nimport android.telephony.CellSignalStrengthGsm;\nimport android.telephony.CellSignalStrengthLte;\nimport android.telephony.CellSignalStrengthNr;\nimport android.telephony.CellSignalStrengthWcdma;\nimport android.telephony.TelephonyManager;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\n\nimport com.example.comovapp.cell.Cell;\nimport com.example.comovapp.cell.CellLTE;\nimport com.google.android.gms.maps.CameraUpdateFactory;\nimport com.google.android.gms.maps.GoogleMap;\nimport com.google.android.gms.maps.OnMapReadyCallback;\nimport com.google.android.gms.maps.SupportMapFragment;\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\nimport com.google.android.gms.maps.model.LatLng;\nimport com.google.android.gms.maps.model.Marker;\nimport com.google.android.gms.maps.model.MarkerOptions;\nimport com.example.comovapp.databinding.ActivityMapViewBinding;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\n\n\npublic class mapView extends FragmentActivity implements OnMapReadyCallback {\n\n    private GoogleMap mMap;\n    private TelephonyData telephonyData;\n    private ActivityMapViewBinding binding;\n\n    private static final String filePath = \"\";\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        binding = ActivityMapViewBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n        mapFragment.getMapAsync(this);\n\n        // Set up the button click listener to add a marker\n        Button button = findViewById(R.id.mapViewInformationButton);\n        this.telephonyData = new TelephonyData(this);\n\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //Imprimir aquí en fichero información de las celdas en JSON\n                addCellsToFile();\n                addMarkerAtCurrentLocation();\n                fetchCellLocation(); // Fetch API data when activity starts\n\n            }\n        });\n    }\n\n    /*\n    private void checkAndRequestPermissions() {\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)\n                != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this,\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},\n                    MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);\n        }\n    }\n    */\n    public void addCellsToFile() {\n        Gson gson = new Gson();\n        JsonObject jsonObject = new JsonObject();\n        int cont = 1;\n        for(Cell cell: telephonyData.getCells()){\n            jsonObject.add(\"cell\" + cont, gson.toJsonTree(cell).getAsJsonObject());\n            cont++;\n        }\n        String jsonString = jsonObject.toString();\n        try {\n            // Comprobar si el fichero existe, si no, crearlo\n            File file = new File(filePath);\n            if (!file.exists()) {\n                if(file.createNewFile()){\n                    Log.d(\"FileCreated: \",\"Success\");\n                }\n            }\n\n            // Añadir jsonString al final del fichero\n            FileWriter writer = new FileWriter(file, true);\n            writer.append(jsonString);\n            writer.close();\n\n\n        } catch (IOException e) {\n            Log.d(\"Error\",  \"Al añadir jsonString al fichero: \" + e.getMessage());\n        }\n\n\n    }\n    private void addMarkerAtCurrentLocation() {\n        if (mMap != null) {\n            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n                return;\n            }\n            mMap.setMyLocationEnabled(true);\n            LatLng currentLocation = new LatLng(mMap.getMyLocation().getLatitude(), mMap.getMyLocation().getLongitude());\n            int signalStrength = telephonyData.getCelldbm();\n            mMap.addMarker(new MarkerOptions()\n                    .position(currentLocation)\n                    .flat(true)\n                    .icon(BitmapDescriptorFactory.defaultMarker(getColorForSignalStrength(signalStrength))));\n\n            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(currentLocation, 15));\n        }\n    }\n\n\n    private float getColorForSignalStrength(int signalStrength) {\n        if (signalStrength > -75) {\n            return BitmapDescriptorFactory.HUE_GREEN;\n        } else if (signalStrength > -100) {\n            return BitmapDescriptorFactory.HUE_YELLOW;\n        } else {\n            return BitmapDescriptorFactory.HUE_RED;\n        }\n    }\n\n    private void checkPermissions() {\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&\n                ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 1);\n        }\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n        mMap = googleMap;\n        showPosition();\n        googleMap.getUiSettings().setZoomControlsEnabled(true);\n        mMap.setPadding(0, 0, 0, 100);  // Adjust padding (left, top, right, bottom)\n\n        // Set a marker click listener\n        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\n            @Override\n            public boolean onMarkerClick(@NonNull Marker marker) {\n                if (!Objects.equals(marker.getTitle(), \"Cell Position\")){\n                    // Call function to show dialog\n                    marker.setTitle(\"Información de las celdas\");\n                    marker.setSnippet(telephonyData.getInfo());\n                    showDialog(marker.getTitle(), marker.getSnippet());\n                }else{\n                    showDialog(marker.getTitle(), marker.getSnippet());\n                }\n\n                return true;\n            }\n        });\n    }\n\n    private void showDialog(String title, String snippet) {\n        // Create and show the dialog\n        new AlertDialog.Builder(mapView.this)\n                .setTitle(title)\n                .setMessage(snippet)\n\n                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        // Close the dialog\n                        dialog.dismiss();\n                    }\n                })\n                .show();\n    }\n\n\n\n    private void showPosition() {\n        // Check permissions\n        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            // Request permissions to user (pop-up)\n            ActivityCompat.requestPermissions(this, new String[]{\n                    Manifest.permission.ACCESS_FINE_LOCATION\n            }, 0);\n            return;\n        }\n        mMap.setMyLocationEnabled(true);\n    }\n\n    /**\n     *\n     * @param requestCode The request code passed in requestPermissions()\n     * @param permissions The requested permissions. Never null.\n     * @param grantResults The grant results for the corresponding permissions\n     *     which is either {@link android.content.pm.PackageManager#PERMISSION_GRANTED}\n     *     or {@link android.content.pm.PackageManager#PERMISSION_DENIED}. Never null.\n     *\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode) {\n            case 0: {\n                // Si tenemos permisos\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    showPosition();\n                }\n                // Si no los tenemos\n                else {\n                    Log.e(\"LocationAction\", \"Se necesitan permisos para poder usar la aplicacion\");\n                }\n            }\n            case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // Permission granted\n                    Log.e(\"WriteExternalStorage\", \"Permisos concedidos\");\n                } else {\n                    // Permission denied\n                    Log.e(\"WriteExternalStorage\", \"Se necesitan permisos para poder usar la aplicacion\");\n                }\n        }\n    }\n\n    public void fetchCellLocation() {\n        Collection<CellLTE> fourGcells = telephonyData.getRegistered4GCells();\n        ApiService apiService = RetrofitClient.getRetrofitInstance().create(ApiService.class);\n        for(CellLTE fourGcell : fourGcells) {\n            Call<ApiResponse> call = apiService.getCellLocation(\"1.1\", \"open\", fourGcell.getMCC(), fourGcell.getMNC(), fourGcell.getTAC(), fourGcell.getCI());\n            call.enqueue(new Callback<ApiResponse>() {\n                @Override\n                public void onResponse(@NonNull Call<ApiResponse> call, @NonNull Response<ApiResponse> response) {\n                    if (response.isSuccessful() && response.body() != null) {\n                        ApiResponse apiResponse = response.body();\n                        LatLng cellLocation = new LatLng(apiResponse.data.lat, apiResponse.data.lon);\n                        // Adding the marker with a custom icon on the map\n                        // Resize the icon\n                        Bitmap imageBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.ic_cell_tower);\n                        Bitmap resizedBitmap = Bitmap.createScaledBitmap(imageBitmap, 100, 100, false); // Adjust width and height as needed\n                        runOnUiThread(new Runnable() {\n                            @Override\n                            public void run() {\n                                if (mMap != null) {\n                                    mMap.addMarker(new MarkerOptions()\n                                            .position(cellLocation)\n                                            .title(\"Celda CI:\" + fourGcell.getCI())\n                                            .snippet(\"Lat: \" + apiResponse.data.lat + \"\\nLon: \" + apiResponse.data.lon + \"\\n\" + \"Cell info:\\n\\n\" + fourGcell.toString())\n                                            .icon(BitmapDescriptorFactory.fromBitmap(resizedBitmap)));\n                                    // Ensure you have ic_cell_tower.png in your drawable folder\n                                }\n                            }\n                        });\n                    } else {\n                        Log.e(\"API Error\", \"Failed to retrieve data\");\n                    }\n                }\n\n                @Override\n                public void onFailure(@NonNull Call<ApiResponse> call, @NonNull Throwable t) {\n                    Log.e(\"API Failure\", Objects.requireNonNull(t.getMessage()));\n                }\n            });\n        }\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/comovapp/mapView.java b/app/src/main/java/com/example/comovapp/mapView.java
--- a/app/src/main/java/com/example/comovapp/mapView.java	
+++ b/app/src/main/java/com/example/comovapp/mapView.java	
@@ -253,6 +253,7 @@
                     Log.e("LocationAction", "Se necesitan permisos para poder usar la aplicacion");
                 }
             }
+            /*
             case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE:
                 if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                     // Permission granted
@@ -261,6 +262,8 @@
                     // Permission denied
                     Log.e("WriteExternalStorage", "Se necesitan permisos para poder usar la aplicacion");
                 }
+
+             */
         }
     }
 
